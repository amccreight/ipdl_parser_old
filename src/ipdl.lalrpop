// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use ast::{Attributes, AttributeValue, CxxTypeKind, Direction, FileType, Identifier,
          Location, MessageDecl, Namespace,
          Param, Protocol, QualifiedId, SendSemantics,
          StructField, TranslationUnit, TypeSpec, UsingStmt};

use parser::{TopLevelDecl, ParserState, PreambleStmt};

grammar<'a>(parser_state: &ParserState<'a>);

//-----------------------------------------------------------------------------

// XXX String now has a location and trims the quotes before and after.
STRING: String = <s:r#""[^"\n]*""#> => String::from(s);

Identifier: Identifier = {
    <start:@L> <id:r"[a-zA-Z_][a-zA-Z0-9_]*"> => {
        let start_loc = parser_state.resolve_location(start);
        Identifier::new(String::from(id), start_loc)
    }
};

//-----------------------------------------------------------------------------

pub TranslationUnit: TranslationUnit = {
    <ps:(PreambleStmt ";")*> <ns:NamespaceThing+> => {
        let mut cxx_includes = Vec::new();
        let mut includes = Vec::new();
        let mut using = Vec::new();
        for p in ps {
            match p.0 {
                PreambleStmt::CxxInclude(f) => cxx_includes.push(f),
                PreambleStmt::Include(f) => includes.push(f),
                PreambleStmt::Using(u) => using.push(u),
            }
        }

        let mut protocol = None;
        let mut structs = Vec::new();
        let mut unions = Vec::new();
        let mut last_is_struct = false;

        for nts in ns {
            for (ns, d) in nts {
                match d {
                    TopLevelDecl::Struct(a, s) => {
                        structs.push((ns, a, s));
                        last_is_struct = true;
                    },
                    TopLevelDecl::Union(a, u) => {
                        unions.push((ns, a, u));
                        last_is_struct = false;
                    },
                    TopLevelDecl::Protocol(p) => {
                        if protocol.is_some() {
                            parser_state.add_error(&ns.name.loc,
                                                   "only one protocol definition per file");
                        } else {
                            protocol = Some((ns, p));
                        }
                    },
                }
            }
        }

        if protocol.is_none() && parser_state.file_type == FileType::Protocol {
            parser_state.add_error(&Location { file_name: parser_state.file_name.clone(), lineno: 0, colno: 0 },
                                   "Protocol file must contain a protocol.");
        }

        // The "canonical" namespace of the translation unit, ie what
        // it's considered to be in for the purposes of C++:
        // |#include "foo/bar/TU.h"|
        let namespace = match &protocol {
            &Some(ref p) => p.0.clone(),
            &None =>
                // There's not really a canonical "thing" in headers. So
                // somewhat arbitrarily use the namespace of the last
                // interesting thing that was declared.
                if last_is_struct {
                    structs.last().unwrap().0.clone()
                } else {
                    unions.last().unwrap().0.clone()
                }
        };

        TranslationUnit {
            namespace: namespace,
            file_type: parser_state.file_type.clone(),
            file_name: parser_state.file_name.clone(),
            cxx_includes: cxx_includes,
            includes: includes,
            using: using,
            structs: structs,
            unions: unions,
            protocol: protocol
        }
    }
};


//--------------------
// Preamble

PreambleStmt = { CxxIncludeStmt, IncludeStmt, UsingStmt };

CxxIncludeStmt: PreambleStmt = {
  "include" <file:STRING> => PreambleStmt::CxxInclude(file),
};

IncludeStmt: PreambleStmt = {
    "include" <p:"protocol"?> <id:Identifier> => {
        let mut file = id.id;
        file.push_str(".ipdl");
        if !p.is_some() {
            file.push_str("h");
        }

        PreambleStmt::Include(parser_state.resolve_include_path(&id.loc, &file))
    }
};

UsingStmt: PreambleStmt = {
    <a:Attributes> "using" <k:CxxTypeKind?> <t:CxxType> "from" <h:STRING> =>
        PreambleStmt::Using(UsingStmt { cxx_type: t,
                                        header: h,
                                        kind: k,
                                        attributes: a}),
};

CxxTypeKind: CxxTypeKind = {
    "class" => CxxTypeKind::Class,
    "struct" => CxxTypeKind::Struct
};


//--------------------
// Namespaced stuff

NamespaceThing: Vec<(Namespace, TopLevelDecl)> = {
    "namespace" <name:Identifier> "{" <many_things:NamespaceThing+> "}" => {
        let mut things = Vec::new();
        for old_things in many_things {
            for (mut ns, node) in old_things {
                ns.add_outer_namespace(&name.id);
                things.push((ns, node))
            }
        }
        things
    },
    <s:StructDecl> => vec![(s.0, TopLevelDecl::Struct(s.1, s.2))],
    <u:UnionDecl> => vec![(u.0, TopLevelDecl::Union(u.1, u.2))],
    <p:ProtocolDefn> => vec![(p.0, TopLevelDecl::Protocol(p.1))],
};


StructDecl: (Namespace, Attributes, Vec<StructField>) = {
    <a:Attributes> "struct" <name:Identifier> "{" <raw_fields: (StructField ";")* > "}" ";" => {
        let mut fields = Vec::new();
        for (f, _) in raw_fields {
            fields.push(f);
        }
        (Namespace::new(name), a, fields)
    }
};

StructField: StructField = {
    <t:Type> <field_name:Identifier> => StructField::new(t, field_name)
};

UnionDecl: (Namespace, Attributes, Vec<TypeSpec>) = {
    <a:Attributes> "union" <name:Identifier> "{" <raw_components: (Type ";")+ > "}" ";" => {
        let mut components = Vec::new();
        for (c, _) in raw_components {
            components.push(c);
        }
        (Namespace::new(name), a, components)
    }
};

ProtocolDefn: (Namespace, Protocol) = {
    <a:Attributes> <q:SendSemantics?> "protocol" <name:Identifier> "{"
        <managers:ManagersStmtOpt> <manages:ManagesStmt*> <decls:MessageDeclThing*> "}" ";" =>
    {
        if let FileType::Header = parser_state.file_type {
            parser_state.add_error(&name.loc,
                                   "can't define a protocol in a header.  Do it in a protocol spec instead.");
        }

        let send_semantics = q.unwrap_or(SendSemantics::Async);
        (Namespace::new(name), Protocol::new(a, send_semantics, managers, manages, decls))
    },
};


//--------------------
// manager/manages stmts

ManagersStmtOpt: Vec<Identifier> = {
    "manager" <l:ManagerList> ";" => l,
    => Vec::new(),
};

ManagerList: Vec<Identifier> = {
    <name:Identifier> => vec![name],
    <l:ManagerList> "or" <name:Identifier> => {
        let mut l = l;
        l.push(name);
        l
    }
};

ManagesStmt: Identifier = {
    "manages" <name:Identifier> ";" => name,
};


//--------------------
// Message decls

MessageDeclThing : MessageDecl = {
    MessageDirectionLabel ":" <m:MessageDecl> ";" => m,
    <m:MessageDecl> ";" => m,
};

MessageDirectionLabel : () = {
    "parent" => parser_state.direction.set(Some(Direction::new_parent())),
    "child" => parser_state.direction.set(Some(Direction::new_child())),
    "both" => parser_state.direction.set(Some(Direction::new_both())),
};


MessageDecl: MessageDecl = {
    <a:Attributes> <s:SendSemantics> <name:Identifier> "(" <in_params:ParamList> ")" <out_params:MessageOutParams> => {
        let d = match parser_state.direction.get() {
            Some(d) => d,
            None => {
                parser_state.add_error(&name.loc,
                                       "missing message direction");
                Direction::new_parent() // Dummy value.
            }
        };
        MessageDecl::new(name, a, s, d, in_params, out_params)
    },
};

MessageOutParams: Vec<Param> = {
    "returns" "(" <l:ParamList> ")" => l,
    => Vec::new(),
};

// --------------------
// Attributes

Attributes: Attributes = {
    "[" <l:AttributeList> "]" => l,
    => Attributes::new(),
};

AttributeList: Attributes = {
    <name:Identifier> <v:AttributeValue> "," <attributes:AttributeList> => {
        let mut attributes = attributes;
        if attributes.insert(name.id.clone(), (name.loc.clone(), v)).is_some() {
            parser_state.add_error(&name.loc,
                                   &format!("Repeated extended attribute `{}'", &name.id));
        }
        attributes
    },
    <name:Identifier> <v:AttributeValue> => {
        Attributes::from([(name.id.clone(), (name.loc.clone(), v))])
    },
};

AttributeValue: AttributeValue = {
    "=" <id:Identifier> => AttributeValue::Identifier(id),
    "=" <s:STRING> => AttributeValue::String(s),
    => AttributeValue::None,
}

//--------------------
// Minor stuff

SendSemantics: SendSemantics = {
    "async" => SendSemantics::Async,
    "sync" => SendSemantics::Sync,
    "intr" => SendSemantics::Intr,
};

ParamList: Vec<Param> = {
    <l:ParamList> "," <p:Param> => {
        let mut l = l;
        l.push(p);
        l
    },
    <p:Param> => vec![p],
    => Vec::new()
};

Param: Param = {
    <a:Attributes> <t:Type> <name:Identifier> => Param::new(a, t, name)
};

Type: TypeSpec = {
    // only actor types are nullable; we check this in the type checker
    <is_nullable: "nullable"?> <t:BasicType> => t.set_nullable(is_nullable.is_some())
};

// ID == CxxType; we forbid qnames here,
// in favor of the |using| declaration
BasicType: TypeSpec = {
    <id:CxxID> <is_array: ("[" "]")?> => {
        TypeSpec::new(id).set_array(is_array.is_some())
    },
    <id:CxxID> "?" => {
        TypeSpec::new(id).set_maybe(true)
    },
    <uniqueptr: CxxUniquePtrInst> => {
        TypeSpec::new(uniqueptr).set_uniqueptr(true)
    },
};


//--------------------
// C++ stuff

CxxType: QualifiedId = {
    <id:QualifiedID> => id,
    <id:CxxID> => QualifiedId::new(id),
};

QualifiedID: QualifiedId = {
    <qual_id:QualifiedID> "::" <id:CxxID> => qual_id.qualify(id),
    <id1:CxxID> "::" <id2:CxxID> => QualifiedId::new(id1).qualify(id2),
};

CxxID: Identifier = {
    Identifier,
    CxxTemplateInst,
};

CxxTemplateInst: Identifier = {
    <t_name:Identifier> "<" <arg:Identifier> ">" => {
        Identifier::new(t_name.id + "<" + &arg.id + ">", t_name.loc)
    }
};

CxxUniquePtrInst: Identifier = {
    <start:@L> "UniquePtr" "<" <arg:Identifier> ">" => {
        let start_loc = parser_state.resolve_location(start);
        Identifier::new(arg.id, start_loc)
    }
};
